AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  S3UploadBucket:   #complete
    Type: 'AWS::S3::Bucket'
    Bucketname : ttluploadbucket
  ttldynamotable:   #mightbedone#
    Type: AWS::DynamoDB::Table
    Properties:
      Tablename: ttlDynamoTestTable
      AttributeDefinitions:
        -
          AttributeName: "IdNumber"
          AttributeType: "S"
        -
          AttributeName: "FirstName"
          AttributeType: "S"
        -
          AttributeName: "LastName"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "IdNumber"
          KeyType: "HASH"
        -
          AttributeName: "FirstName"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        -
          IndexName: "GSI"
          KeySchema:
            -
              AttributeName: "LastNAme"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  WriteCapacityScalableTarget:   #complete
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 15
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref ttldynamotable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  ScalingRole:   #complete
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "DynamodbAutoScaling"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
  WriteScalingPolicy:   #complete
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  lambdaRead:   #complete
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: lambdaRead.lambda_handler
      CodeUri: https://ttllambdafunctions.s3.amazonaws.com/lambdaRead.py
      Role: !GetAtt ReadLambdaExecutionRole.Arn
      Events:
        InvoiceUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3UploadBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          SNSROLEARN: !GetAtt SNSRole.Arn
          SNSTOPIC: !Ref SNSTopic
  lambdaWrite: #might not be done 
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: lambdaWrite.lambda_handler
      Layers:
        - !Ref WriteFunctionDepLayer
      CodeUri: https://ttllambdafunctions.s3.amazonaws.com/lambdaWrite.py
      Role: !GetAtt WriteLambdaExecutionRole.Arn
      Environment:
  Comprehend:
  SNSTopic:   #complete
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: LambdaSNSTopic
      TopicName: LambdaSNSTopic
  SNSRole:   #complete
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - textract.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: sns-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:publish
            Resource: !Ref SNSTopic
  ReadLambdaExecutionRole:   #complete
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: cloudwatch-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: textract-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - textract:*
            Resource: '*'
      - PolicyName: s3-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            # short workaround to solve circular dependency with bucket
            Resource: '*'
  WriteLambdaExecutionRole:   #complete
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: cloudwatch-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      # Necessary for get_document_analysis
      - PolicyName: textract-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - textract:*
            Resource: '*'
      # Use Access Management (IAM) database authentication
      - PolicyName: dynamodb-policy
        PolicyDocument:
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: Allow
        Action: 
          - "dynamodb:BatchGetItem"
          - "dynamodb:GetItem"
          - "dynamodb:Query"
          - "dynamodb:Scan"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:PutItem"
          - "dynamodb:UpdateItem"

      Resource: "arn:aws:dynamodb:AWS::Region:AWS::AccountID:table/ttlDynamoTestTable"
  WriteFunctionDepLayer: ###### might not be needed
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: write-function-app-dependencies
        Description: Dependencies for sam app 
        ContentUri: https://ttllambdafunctions.s3.amazonaws.com/dependencies/*
          - python3.7
        LicenseInfo: 'MIT'
        RetentionPolicy: Retain
  Subscription:   #complete
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt WriteFunction.Arn
      Protocol: lambda
      TopicArn: !Ref SNSTopic
  InvokePermission:   #complete
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WriteFunction
      Principal: sns.amazonaws.com