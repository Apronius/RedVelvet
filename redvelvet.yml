AWSTemplateFormatVersion: 2010-09-09
Resources:
  S3UploadBucket:   #complete
    Type: 'AWS::S3::Bucket'
    Bucketname : 'ttluploadbucket'
  dynamotable:   
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: ttluploadtable
  lambdaRead:   #complete
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: lambdaRead.lambda_handler
      CodeUri: https://ttllambdafunctions.s3.amazonaws.com/lambdaRead.py
      Role: !GetAtt ReadLambdaExecutionRole.Arn
      Events:
        InvoiceUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3UploadBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          SNSROLEARN: !GetAtt SNSRole.Arn
          SNSTOPIC: !Ref SNSTopic
  lambdaWrite:
    Type: 'AWS::Lambda::Function'
    Properties: {}
  Comprehend:
  SNSTopic:   #complete
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: LambdaSNSTopic
      TopicName: LambdaSNSTopic
  SNSRole:   #complete
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - textract.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: sns-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:publish
            Resource: !Ref SNSTopic
  ReadLambdaExecutionRole:   #complete
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: cloudwatch-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: textract-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - textract:*
            Resource: '*'
      - PolicyName: s3-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            # short workaround to solve circular dependency with bucket
            Resource: '*'
  WriteLambdaExecutionRole:   #complete
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: cloudwatch-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      # Necessary for get_document_analysis
      - PolicyName: textract-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - textract:*
            Resource: '*'
      # Use Access Management (IAM) database authentication
      - PolicyName: dynamodb-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb : BatchGetItem
				    - dynamodb : GetItem,
				    - dynamodb : Query
				    - dynamodb : Scan
				    - dynamodb : BatchWriteItem
				    - dynamodb : PutItem
				    - dynamodb : UpdateItem
            Resource: "arn:aws:dynamodb:us-east-1:680854123646:table/SampleTable"