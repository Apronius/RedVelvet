AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DocumentBucketName:
    Type: String
    Description: ' The name for the bucket where you''ll upload your scanned documents.'
    AllowedPattern: >-
      ^([a-z]|(\d(?!\d{0,2}\.\d{1,3}\.\d{1,3}\.\d{1,3})))([a-z\d]|(\.(?!(\.|-)))|(-(?!\.))){1,61}[a-z\d\.]$
    Default: scanned-documents
    ConstraintDescription: Should be a Valid S3 Bucket Name
  NewDocumentBucketNeeded:
    Type: String
    Description: Create new S3 bucket for document input?
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  TextractRoleName:
    Type: String
    Description: ' The role that Textract will use assume permissions to publish to SNS topic and to access S3 bucket.'
    Default: ServiceTextractRole
    ConstraintDescription: Should be a Valid IAM Role Name
  LambdaRoleName:
    Type: String
    Description: ' The role that Lambda functions will assume in order be able to Textract API and access S3 buckets'
    Default: LambdaTextractRole
    ConstraintDescription: Should be a Valid IAM Role Name
  TextDetectionJobStatusTopicName:
    Type: String
    Default: TextDetectionJobStatusTopic
    Description: >-
      SNS Topic where Textract will publish JobIds upon completion of text
      detection jobs
  LambdaCodeBucketName:
    Type: String
    AllowedPattern: >-
      ^([a-z]|(\d(?!\d{0,2}\.\d{1,3}\.\d{1,3}\.\d{1,3})))([a-z\d]|(\.(?!(\.|-)))|(-(?!\.))){1,61}[a-z\d\.]$
    Default: ttllambdafunctions
    ConstraintDescription: Should be a Valid S3 Bucket Name
    Description: S3 Bucket hosting lambda code package (DO NOT CHANGE)
  LambdaCodeFile:
    Type: String
    Default: textract-lambda-code.zip
    Description: Zip file containing the lambda code (DO NOT CHANGE)
Conditions:
  DocumentBucketNameNotEmptyCondition: !Not 
    - !Equals 
      - ''
      - !Ref DocumentBucketName
  NewDocumentBucketNeededCondition: !Equals 
    - 'true'
    - !Ref NewDocumentBucketNeeded
  NewDocumentBucketCreation: !And 
    - !Condition DocumentBucketNameNotEmptyCondition
    - !Condition NewDocumentBucketNeededCondition
  TextDetectionJobStatusTopicNameNotEmptyCondition: !Not 
    - !Equals 
      - ''
      - !Ref TextDetectionJobStatusTopicName
Resources:
  PostProcessedS3Bucket:   
    Type: 'AWS::S3::Bucket'
    DependsOn:
      - TextractAsyncJobSubmitFunction
      - DocumentAnalysisLambdaInvokeS3Permission
    Properties:
      BucketName: ttlpostprocessedbucket
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
  ProcessedBucketPolicy:   
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: PostProcessedS3Bucket
    Properties:
      Bucket: !Ref PostProcessedS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt 
                - LambdaTextractRole
                - Arn
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource: !Join 
              - /
              - - !GetAtt 
                  - PostProcessedS3Bucket
                  - Arn
                - '*'
          - Effect: Allow
            Principal:
              AWS: !GetAtt 
                - LambdaTextractRole
                - Arn
            Action:
              - 's3:ListBucket'
              - 's3:ListBucketVersions'
            Resource: !GetAtt 
              - PostProcessedS3Bucket
              - Arn
    DeletionPolicy: Retain
  LambdaTextractRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join 
        - '-'
        - - !Ref 'AWS::Region'
          - !Ref LambdaRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lambda_basic_execution_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'xray:PutTraceSegments'
                Resource: '*'
        - PolicyName: iam_access_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:*'
                Resource: '*'
        - PolicyName: dynamodb_access_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'dynamodb:*'
                Resource: '*'
        - PolicyName: textract_access_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'textract:*'
                Resource: '*'
  TextractPostProcessTextFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaTextractRole
    Properties:
      Description: >-
        Python Lambda function that retrieves the document job result and
        extracts lines of text from the result
      Handler: detect-text-postprocess-page.lambda_handler
      Role: !GetAtt 
        - LambdaTextractRole
        - Arn
      Environment:
        Variables:
          AWS_DATA_PATH: models
          max_retry_attempt: '3'
          retry_interval: '10'
          max_results: '1000'
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: !Ref LambdaCodeFile
      Runtime: python3.6
      Timeout: '900'
      MemorySize: '1024'
      TracingConfig:
        Mode: Active
  TextDetectionJobStatusTopic:
    Type: 'AWS::SNS::Topic'
    DependsOn:
      - TextractPostProcessTextFunction
    Condition: TextDetectionJobStatusTopicNameNotEmptyCondition
    Properties:
      DisplayName: !Join 
        - '-'
        - - !Ref 'AWS::Region'
          - !Ref TextDetectionJobStatusTopicName
      Subscription:
        - Endpoint: !GetAtt 
            - TextractPostProcessTextFunction
            - Arn
          Protocol: lambda
  PostProcessTextInvokeSNSPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: TextDetectionJobStatusTopic
    Properties:
      FunctionName: !Ref TextractPostProcessTextFunction
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref TextDetectionJobStatusTopic
  TextractAsyncJobSubmitFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - TextDetectionJobStatusTopic
    Properties:
      Description: >-
        Python Lambda function that scans an input S3 bucket for scanned
        document, and invokes Textract to extract tables and forms.
      Handler: textract-job-submit-async.lambda_handler
      Role: !GetAtt 
        - LambdaTextractRole
        - Arn
      Environment:
        Variables:
          AWS_DATA_PATH: models
          max_retry_attempt: '3'
          retry_interval: '30'
          document_analysis_token_prefix: TextractDocumentAnalysisJob
          text_detection_token_prefix: TextractTextDetectionJob
          text_detection_topic_arn: !Ref TextDetectionJobStatusTopic
          role_arn: !Join 
            - ':'
            - - arn
              - aws
              - iam
              - ''
              - !Ref 'AWS::AccountId'
              - !Join 
                - /
                - - role
                  - !Join 
                    - '-'
                    - - !Ref 'AWS::Region'
                      - !Ref TextractRoleName
          role_name: !Ref LambdaTextractRole
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: !Ref LambdaCodeFile
      Runtime: python3.6
      Timeout: '900'
      MemorySize: '1024'
      TracingConfig:
        Mode: Active
  DocumentAnalysisLambdaInvokeS3Permission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: TextractAsyncJobSubmitFunction
    Properties:
      FunctionName: !Ref TextractAsyncJobSubmitFunction
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceArn: !Join 
        - ':'
        - - arn
          - aws
          - s3
          - ''
          - ''
          - !Join 
            - '-'
            - - !Ref 'AWS::AccountId'
              - !Ref DocumentBucketName
  TextractServiceRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - TextDetectionJobStatusTopic
    Properties:
      RoleName: !Join 
        - '-'
        - - !Ref 'AWS::Region'
          - !Ref TextractRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - textract.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonTextractServiceRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref TextDetectionJobStatusTopic
  DocumentBucket:
    Type: 'AWS::S3::Bucket'
    DependsOn:
      - TextractAsyncJobSubmitFunction
      - DocumentAnalysisLambdaInvokeS3Permission
    Condition: NewDocumentBucketCreation
    Properties:
      BucketName: !Join 
        - '-'
        - - !Ref 'AWS::AccountId'
          - !Ref DocumentBucketName
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt 
              - TextractAsyncJobSubmitFunction
              - Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: pdf
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt 
              - TextractAsyncJobSubmitFunction
              - Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: jpg
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt 
              - TextractAsyncJobSubmitFunction
              - Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: jpeg
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt 
              - TextractAsyncJobSubmitFunction
              - Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: png
    DeletionPolicy: Retain
  DocumentBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: DocumentBucket
    Condition: NewDocumentBucketCreation
    Properties:
      Bucket: !Ref DocumentBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt 
                - LambdaTextractRole
                - Arn
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource: !Join 
              - /
              - - !GetAtt 
                  - DocumentBucket
                  - Arn
                - '*'
          - Effect: Allow
            Principal:
              AWS: !GetAtt 
                - LambdaTextractRole
                - Arn
            Action:
              - 's3:ListBucket'
              - 's3:ListBucketVersions'
            Resource: !GetAtt 
              - DocumentBucket
              - Arn
    DeletionPolicy: Retain
  TextractDemoAPI:
    Type: 'AWS::ApiGateway::RestApi'
    DependsOn:
      - TextractAsyncJobSubmitFunction
    Properties:
      Name: Textract Demo API
      Description: >-
        API to invoke Textract with documents on specified S3 bucket, and
        extract text features
      FailOnWarnings: true
      Body:
        swagger: '2.0'
        info:
          version: '2018-02-16T18:05:24Z'
          title: Textract Demo API
        host: zejy1hx0p0.execute-api.us-west-2.amazonaws.com
        basePath: /test
        schemes:
          - https
        paths:
          /submittextanalysisjob:
            get:
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - name: Bucket
                  in: query
                  required: true
                  type: string
                - name: Document
                  in: query
                  required: true
                  type: string
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                uri: !Join 
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':lambda:path/2015-03-31/functions/'
                    - !GetAtt 
                      - TextractAsyncJobSubmitFunction
                      - Arn
                    - /invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  application/json: >-
                    { "ExternalBucketName":
                    "$input.params('Bucket')","ExternalDocumentPrefix":
                    "$input.params('Document')"}
                contentHandling: CONVERT_TO_TEXT
                type: aws
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Headers: >-
                        'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
        definitions:
          Empty:
            type: object
            title: Empty Schema
  TextractAsyncJobSubmitFunctionLambdaInvokeAPIPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: TextractDemoAPI
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - TextractAsyncJobSubmitFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref TextractDemoAPI
          - /*
  TextractDemoAPIDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: TextractDemoAPI
    Properties:
      RestApiId: !Ref TextractDemoAPI
      StageName: demo
      StageDescription:
        LoggingLevel: INFO
        MetricsEnabled: 'true'
Outputs:
  DocumentBucket:
    Description: Upload documents on this bucket to analyze using Textract
    Value: !Join 
      - '&'
      - - !Join 
          - '?'
          - - !Join 
              - /
              - - 'https:'
                - ''
                - s3.console.aws.amazon.com
                - s3
                - buckets
                - !Ref DocumentBucket
            - !Join 
              - =
              - - region
                - !Ref 'AWS::Region'
        - tab=items
  TextractEnhancerAPIInvokeURL:
    Description: API to submit jobs and retrieve Textract results
    Value: !Join 
      - /
      - - 'https:'
        - ''
        - !Join 
          - .
          - - !Ref TextractDemoAPI
            - execute-api
            - !Ref 'AWS::Region'
            - amazonaws
            - com
        - demo
  TextractAsyncJobSubmitFunction:
    Description: Function to submit Textract jobs
    Value: !Join 
      - /
      - - !Join 
          - '#'
          - - !Join 
              - '?'
              - - !Join 
                  - /
                  - - 'https:'
                    - ''
                    - console.aws.amazon.com
                    - lambda
                    - home
                - !Join 
                  - =
                  - - region
                    - !Ref 'AWS::Region'
            - /functions
        - !Ref TextractAsyncJobSubmitFunction
  TextractPostProcessTextFunction:
    Description: Function to extract lines of text from Textract response
    Value: !Join 
      - /
      - - !Join 
          - '#'
          - - !Join 
              - '?'
              - - !Join 
                  - /
                  - - 'https:'
                    - ''
                    - console.aws.amazon.com
                    - lambda
                    - home
                - !Join 
                  - =
                  - - region
                    - !Ref 'AWS::Region'
            - /functions
        - !Ref TextractPostProcessTextFunction
